▣▣ 튜닝예제8.  order by 를 통한 과도한 정렬작업을 피하세요 !

  order by  절을 사용해서 SQL을 작성하게 되면 오라클은 내부적으로 정렬작업을
  수행하기 위해 오라클 메모리인 pga 영역에서 정렬작업을 수행합니다.
  그런데 이 pga 영역이 한정된 메모리 영역이기 때문에 너무 과도한 정렬작업을
  해야한다면 db 에 부하를 주게 됩니다. 

  그래서 만약 인덱스를 활용할 수 있다면 order by 절 쓰지말고 인덱스를 통해서
  정렬된 결과를 보는 튜닝방법입니다. 

  다음과 같이 인덱스를 생성하면 인덱스의 구조는 컬럼값 + rowid 로 되어있고
  컬럼값은 ascending 하게 정렬되어 저장되게 됩니다. 

   @demo
    create  index   emp_sal  on  emp(sal);

   12번째 ppt 그림을 참고 하세요 ~

  테이블에 rowid 를 조회하시오 !

  select  rowid, e.*
    from  emp  e;

   rowid 가 해당 로우의 주소입니다.  이 주소가 테이블에도 있고 인덱스에도 있습니다.

문제15.  아래의 SQL을 튜닝하시오 !

 @demo
 create  index  emp_sal  on   emp(sal);

 튜닝전:   select  ename, sal
                  from  emp
                  order  by   sal  asc;

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

실행계획에서 order by 가 출현하면 빅데이터 환경에서는 느려집니다. 

 튜닝후:   select  ename, sal
              from  emp
              where  sal >= 0 ;  

 설명:  where  절에 인덱스 컬럼을 가지고 검색조건을 줘야 인덱스를 사용할 수 있습니다.

 인덱스를 스캔할 때 사용하는 힌트 2가지 ?

   1. index_asc 힌트  :  인덱스를 위에 아래로 ascending 하게 스캔하겠다.
   2. index_desc 힌트 :  인덱스를 밑에 위로 descending 하게 스캔하겠다.

문제16.  아래의 SQL 을 튜닝하시오 !

@demo
create  index  emp_sal  on  emp(sal);

튜닝전:   select   ename, sal
              from  emp
              order   by   sal  desc;  

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

튜닝후:   select  /*+ index_desc(emp  emp_sal)  */ ename, sal
               from  emp
               where  sal >= 0 ;

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

※ 인덱스의 데이터를 모두 다 스캔하는 where 절 검색 조건

 1. 숫자 >= 0 
 2. 문자 > '  ' 
 3. 날짜 <= to_date('9999/12/31', 'RRRR/MM/DD')

문제17. (오늘의 마지막 문제)  아래의 SQL 을 튜닝하시오 !  버퍼의 갯수를 비교하세요

@demo
create  index  emp_hiredate  on  emp(hiredate);

튜닝전:   select  ename, hiredate
                from  emp
                order  by  hiredate  desc; 

튜닝후: 

나머지 시간은 자유롭게 SQL 포트폴리오 또는 수학 스터디 하시면 됩니다.
질문 있으면 언제든 물어보세요 ~~
