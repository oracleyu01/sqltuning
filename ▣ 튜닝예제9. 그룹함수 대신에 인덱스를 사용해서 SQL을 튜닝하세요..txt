▣▣ 튜닝예제9. 그룹함수 대신에 인덱스를 사용해서 SQL을 튜닝하세요. 

  그룹함수도 정렬작업이 내부적으로 발생합니다.
  정렬작업을 최소화 하기 위해서 인덱스를 활용을 해서 SQL 을 작성하는게  권장됩니다. 

  SQL 이 길다고 악성 SQL 이 아니고 인덱스를 활용하지 못하는 SQL이 악성 SQL
  입니다.

실습예제1.  사원 테이블에서 최대월급을 출력하고 실행계획을 보시오 !

@demo

select  max(sal)
  from  emp;

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

설명:  실행계획에 sort aggregate 가 나오면서 정렬 작업을 내부적으로 수행했다는
         것을 확인할 수 있습니다.

※  전체 범위 처리 와 부분범위 처리 라는 용어를 알고 있어야합니다. (SQL전문가)

 1. 전체 범위 처리 :  테이블 전체를 다 읽어야 결과를 볼 수 있는 SQL
 
  예:   select  max(sal)  
          from emp;

 2. 부분 범위 처리 :  테이블이나 인덱스의 일부분만 읽어서도 결과를 볼 수 있는 SQL

   예:    create  index  emp_sal  on  emp(sal);

           select  /*+  index_desc( emp  emp_sal )  */  sal
             from  emp
             where sal >= 0   and  rownum  = 1; 

문제18.  아래의 SQL을 부분범위 처리가 되도록 튜닝하시오 !
            인덱스가 필요하면 인덱스도 직접 생성하세요.

튜닝전 :  select  max(hiredate)
              from emp;

튜닝후:  create  index  emp_hiredate  on  emp(hiredate);

           select  /*+ index_desc( emp  emp_hiredate) */  hiredate
              from emp
              where  hiredate < to_date('9999/12/31', 'RRRR/MM/RR')
               and  rownum = 1; 

설명: 튜닝전 SQL은 인덱스가 hiredate 에 있든 없든간에 full  이라는 키워드가
       실행계획에 나옵니다. 이말은 전체 범위를 했다는 애기입니다.
       그런데 부분범위 처리로 유도하는게 OLTP 환경에서는 더 검색성능이 
       좋습니다.  그래서 부분범위처리로 유도해야합니다. 

1. OLTP 환경 db  (online trasaction processing)

  쿠팡이츠로 주문을 했으면 지금 주문이 주문 테이블 insert 하게 되면서
  insert 라는 트랜잭션이 발생합니다.  그리고 이 주문을 조회하는 쿼리문이
  수행이 되는데 이 쿼리문이 빨리 검색이 되어야합니다. 
  이때는 부분범위 처리 SQL로 작성해야 됩니다. 

2. DW 환경  db   ( data warehouse) 

  쿠팡에서 밤 12시부터 새벽 시간에 지난 하루동안에 있었던 주문을 분석해서
   사람들이 어떤걸 좋아하고 앞으로 우리가 어떤것을 준비해야하는지
   분석하는 SQL을 돌리는데 이게 시간이 많이 걸립니다.
   이 SQL 은 전체 범위 처리를 할 수 밖에 없는 SQL 이 많습니다. 

문제19.  다음의 전체 범위 처리를 하는 SQL을 부분범위 처리로 튜닝하시오 !
            인덱스가 없으면 생성하고 있으면 활용을 하세요 !

튜닝전 :   select  ename, sal
               from  emp
               where  sal =  (  select  max(sal)
                                      from   emp );  

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

설명:    서브쿼리를 먼저 수행면서 index 를 full 로 스캔했습니다. 
           (min/max) 가 나왔다는것은 min 또는 max 함수를 사용하는 쿼리에 대해
           특정열의 가장 작은값이나 가장 큰값을 찾기 위해 최적화된 스캔 유형
           입니다.  그런데 부분범위 처리를 했다는것은 아니고 전체범위를 처리를
            하지만 결과적으로 필요한 값을 빠르게 추출하는 최적화된 접근 방법
           입니다. 

튜닝후 :  select  /*+  index_desc( emp  emp_sal )  */  ename, sal
              from  emp
              where  sal >= 0   and  rownum = 1; 

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

설명: 튜닝전은 index full scan 이라는 실행계획이 나오면서 전체 범위를 처리를
        했습니다.  튜닝후는 index range scan 과 count stop key 이 나오면서
        부분범위 처리를 했습니다. 
 
문제20. 아래의 SQL을 부분범위 처리로 유도하시오 !
           인덱스가 있으면 인덱스를 활용하세요 ! 

튜닝전 :  select  ename, hiredate
               from  emp
               where  hiredate =  ( select  max(hiredate)
                                             from   emp ) ;

튜닝후 : select  /*+ index_desc( emp  emp_hiredate )  */ ename,  hiredate
              from  emp
              where   hiredate < to_date('9999/12/31', 'RRRR/MM/DD')  
               and  rownum = 1;
