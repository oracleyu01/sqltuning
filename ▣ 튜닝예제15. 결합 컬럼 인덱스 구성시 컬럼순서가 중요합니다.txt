
▣ 튜닝예제15. 결합 컬럼 인덱스 구성시 컬럼순서가 중요합니다

관련 그림 : https://cafe.daum.net/oracleoracle/SoqJ/72

설명:  col+col2 인덱스가 col2+col1 결합 인덱스보다 인덱스를 짧게 스캔하면서 
        원하는 결과를 검색하고 있습니다. 그래서 결합 컬럼 인덱스 생성시
        컬럼 순서가 중요합니다. 

 예를들어 다음과 같이 쿼리문이 있다고 하면 
  
  select  *  
    from  tab1
    where  col1='A'
       and  col2  between  '111'   and  '113';  

※ 용어정리 !

 1. 점조건  :  = 이나 in 을 사용하면 점조건
 2. 선분조건 :  between..and 나 like 를 사용하면 선분 조건입니다.

 ★  점조건이 있는 컬럼을 결합 컬럼 인덱스의 첫번째 컬럼으로 구성을 하는게
      선분조건이 있는 컬럼을 첫번째 컬럼으로 구성하는것보다 더 인덱스를 짧게
      스캔할 수 있어서 성능이 더 좋습니다. 


■ 실습예제1.  아래의 환경을 구성하시오 !

drop  table mcustsum  purge;

create table mcustsum
as
select rownum custno
     , '2008' || lpad(ceil(rownum/100000), 2, '0') salemm
     , decode(mod(rownum, 12), 1, 'A', 'B') salegb
     , round(dbms_random.value(1000,100000), -2) saleamt
from   dual
connect by level <= 1200000 ;

create  index  m_salegb_salemm  on  mcustsum(salegb,salemm);
create  index  m_salemm_salegb  on  mcustsum(salemm,salegb);

■ 실습예제2.  아래의 select 문을 실행하는데 m_salegb_salemm 인덱스를 이용할 수
                   있도록 힌트를 주시오 !

 select count(*)
   from  mcustsum   t
   where  salegb='A'
      and  salemm   between  '200801'  and  '200812'; 

답:  
 select /*+ index( t  m_salegb_salemm)  */  count(*)
   from  mcustsum   t
   where  salegb='A'
      and  salemm   between  '200801'  and  '200812'; 

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

버퍼의 갯수 218개 입니다. 

■ 실습예제3.  이번에는 선분조건을 선두 컬럼에 둔 m_salemm_salegb  인덱스를
                   엑세스 하겠금 힌트를 주시오 !

 select  /*+ index( t  m_salemm_salegb )  
               no_index_ss( t  m_salemm_salegb ) */ count(*)
   from  mcustsum   t
   where  salegb='A'
      and  salemm   between  '200801'  and  '200812'; 

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

설명: 일부러 index skip scan 을 하지 못하게 index_ss 라는 힌트를 줬습니다 .
        그래서 그냥 m_salesmm_salegb 인덱스를 range 스캔하게 했더니
       2767개의 버퍼를 읽어들이고 있습니다. 

문제33.  아래의 환경을 구성하고  2개의 인덱스 중 아래의 SQL을 튜닝하시오 !

@demo
create  index  emp_deptno_job   on   emp(deptno, job);
create  index  emp_job_deptno  on  emp(job, deptno);

튜닝전:  select  /*+ index(emp emp_deptno_job) */   count(*)
                from  emp
                where  deptno  between  10  and   30
                 and  job ='CLERK';

튜닝후:  select  /*+  index(emp  emp_job_deptno) */  count(*)
                from  emp
                where  deptno  between  10  and   30
                 and  job ='CLERK';

테이블이 작어서 버퍼의 갯수는 차이가 나지 않지만 점조건이 선두 컬럼으로 있는
결합 컬럼 인덱스를 선택하는게 더 성능에 좋습니다. 

■ 실습예제4.  아래의 인덱스 삭제 명령어를 실행하시오 !

 drop   index  m_salegb_salemm;  

■ 실습예제5. 선두 컬럼이 선분조건인 결합 컬럼 인덱스만 있는 상태에서 아래의 SQL을
                  튜닝하시오 !

튜닝전:   select  /*+ index( t m_salemm_salegb)
                          no_index_ss( t  m_salemm_salegb )  */  count(*)
               from  mcustsum   t
               where  salegb ='A'
                and  salemm  between  '200801'  and '200812'; 

튜닝후:   선분조건을 점조건으로 변경해서 SQL을 재작성합니다. 

           select  /*+ index( t m_salemm_salegb)
                          no_index_ss( t  m_salemm_salegb )  */  count(*)
               from  mcustsum   t
               where  salegb ='A'
                and  salemm  in  ('200801', '200802', '200803', '200804', '200805',
                                        '200806', '200807', '200808', '200809', '200810',
                                        '200811', '200812'); 

설명 : between ..and 를 in 으로 변경해서 SQL 재작성 했더니 버퍼의 갯수가 
        3000 개가 넘었던게 304로 확 줄어들었습니다 .

관련 설명 그림 : https://cafe.daum.net/oracleoracle/SoqJ/74

 설명:   col2 between  111 and  112 이면 111 과 112 사이에는 111.1 있을 수도 있고
           111.2 가 있을 수 도 있으므로 col2+col1 의 결합 컬럼 인덱스를 많이 넓게
            스캔해야합니다. 그런데  col2 in (111, 112) 이면 col2 가 111 과 col2 가 112
           만 스캔하면서 col1 이 A 인것을 찾으면 끝납니다. 

문제34. (오늘의 마지막 문제) 아래의 환경을 만들고 아래의 SQL을 튜닝하시오 !

 select 'drop  index  ' ||  lower(index_name)  || ';'
       from user_indexes 
          where table_name='EMP19';

drop  index  emp19_gender;
drop  index  emp19_telecom;
drop  index  emp19_ename_reg;
drop  index  emp19_address_func;
drop  index  emp19_birth;
drop  index  emp19_ename;
drop  index  emp19_age;
 
 create   index  emp19_age_telecom   on   emp19(age, telecom);

튜닝전:  select   ename, age, telecom
             from  emp19
             where   telecom  in ( 'sk' , 'kt')
                and   age  between  25  and 30; 

튜닝후:  버퍼의 갯수와 관계없이 그냥 between .. and 를 in 으로 변경하세요

