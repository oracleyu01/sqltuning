
▣ 튜닝예제18. index fast full scan 을 사용하세요 !

 index  fast  full   scan  은  index  full scan 처럼  table full scan 보다 
 빠르게 데이터를 검색해냅니다. 
 그런데 index fast full scan 이 index  full scan 보다 더 빠릅니다.

 index fast full scan  >   index   full  scan  >  table  full  scan  

 왜  index  fast  full scan  이  index  full scan 보다 더 빠른가 ? 

  1. 데이터를 정렬하지 않습니다.

  2. single  block  i/o 가 아니라 muti block  i/o 를 합니다. 

     예: 책의 목차가 50장이 있다고 가정하겠습니다.
          50장의 목차를 full 로 스캔하는데 만약 싱글 블럭 i/o를 한다면
          책장을 한번 넘길때 1장씩 넘기는거고 
           multi block i/o를 한다면 책장을 한번 넘길때 10장씩 넘기는겁니다.

■ 실습1.   직업, 직업별 토탈월급을 출력하는데 index  fast  full scan 이 되게 하시오

@demo
create   index   emp_job_sal   on  emp(job, sal);

-- index  full scan  실행계획 

select  job, sum(sal)
  from  emp
  where  job is  not  null
  group  by  job; 

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));


-- index  fast full scan 실행계획 

select  /*+ index_ffs(emp emp_job_sal) */  job, sum(sal)
  from  emp
  where  job is  not  null
  group  by  job; 

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

문제40.  부서번호, 부서번호별 토탈월급을 출력하는데 아래의 쿼리의 결과가
           index  full scan 을 했을때와 index fast full scan 을 했을때
           정렬된 결과의 차이가 있는지 확인하시오 !

@demo
create   index  emp_deptno_sal  on  emp(deptno,sal);

튜닝전:  index  full scan을 했을때
 
 select  deptno, sum(sal)
  from  emp
 where  deptno  is not null
 group  by deptno; 


튜닝후:  index  fast full scan을 했을때 

 select  /*+ index_ffs(emp emp_deptno_sal) */ deptno, sum(sal)
  from  emp
 where  deptno  is not null
 group  by deptno; 

문제41.아래의 환경을 구성하고 salegb 별  salegb 별 토탈 salesamt 를 출력하시오

drop  table mcustsum  purge;

create table mcustsum
as
select rownum custno
     , '2008' || lpad(ceil(rownum/100000), 2, '0') salemm
     , decode(mod(rownum, 12), 1, 'A', 'B') salegb
     , round(dbms_random.value(1000,100000), -2) saleamt
from   dual
connect by level <= 1200000 ;

create  index  m_salegb_saleamt  on  mcustsum(salegb, saleamt);

-- index full scan 으로 유도하고 정렬되었는지 확인 

select /*+ index(m m_salegb_saleamt) */ salegb, sum(saleamt)
  from  mcustsum m
  where salegb is not null
  group by salegb;

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

-- index fast full scan 으로 유도하고 정렬되었는지 확인 

select /*+ index_ffs(m m_salegb_saleamt) */ salegb, sum(saleamt)
  from  mcustsum m
  where salegb is not null
  group by salegb;

select * from  table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

관련 실행계획 :  https://cafe.daum.net/oracleoracle/SoqJ/110

index fast full scan은 index full scan 과는 다르게 정렬을 안하기 때문에 
결과가 더 빨리 출력됩니다. 

문제42.  index  fast  full scan 을 더 빠르게 하는 방법을 이용해서  직업과 
           직업별 인원수를 출력하시오 !

 @demo
 create   index  emp_job   on  emp(job);

 select  /*+  index_ffs(emp  emp_job)  parallel_index(emp, emp_job, 16) */ 
          job, count(*)
   from   emp
   where  job  is  not  null
   group   by   job; 

 설명:  paralle_index(테이블명, 인덱스이름, 병렬도) 로 힌트를 주게 되면
         인덱스를 여러 프로세서들이 동시에 나눠서 병렬로 스캔합니다.

문제43.   아래의 쿼리의 인덱스를 index fast full scan 하고 병렬로 스캔할 수 있게 
             하시오 !

@demo
create  index  emp_deptno  on  emp(deptno);

튜닝전: select  deptno, count(*)
            from  emp
            group by  deptno;

튜닝후:  select /*+ index_ffs(emp emp_deptno)  parallel_index(emp, emp_deptno,16) */
                    deptno, count(*)
              from  emp
              where deptno  is  not  null
              group  by  deptno;
